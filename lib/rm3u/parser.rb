#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative 'lexer'

module Rm3u
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 68)
  attr_accessor :playlist, :current_segment

  def initialize
    @playlist = Rm3u::Playlist.new
    @current_segment = nil
  end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,    10,     8,     3,     9,     6,     7,    13,     8,    14,
     9,     6,     7,    15,     8,   nil,     9,     6,     7,   nil,
     8,   nil,     9,     6 ]

racc_action_check = [
     0,     1,     0,     0,     0,     0,     3,     7,     3,     8,
     3,     3,     4,    10,     4,   nil,     4,     4,    11,   nil,
    11,   nil,    11,    11 ]

racc_action_pointer = [
    -2,     1,   nil,     4,    10,   nil,   nil,     4,     6,   nil,
    13,    16,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -14,    -1,    -4,    -5,    -6,    -8,    -9,   -11,   -13,
   -14,    -3,    -7,   -10,   -12,    16 ]

racc_goto_table = [
    12,     4,     1,     2,    11,   nil,   nil,    12 ]

racc_goto_check = [
     4,     3,     1,     2,     3,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     2,     3,     1,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_1,
  0, 9, :_reduce_none,
  2, 10, :_reduce_3,
  1, 10, :_reduce_4,
  1, 10, :_reduce_none,
  1, 11, :_reduce_none,
  2, 11, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_9,
  2, 12, :_reduce_10,
  1, 12, :_reduce_11,
  2, 12, :_reduce_12,
  1, 12, :_reduce_13 ]

racc_reduce_n = 14

racc_shift_n = 16

racc_token_table = {
  false => 0,
  :error => 1,
  :EXT => 2,
  :EXT_TEXT => 3,
  :EXTINF => 4,
  :EXTM3U => 5,
  :PATH => 6,
  :REM => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EXT",
  "EXT_TEXT",
  "EXTINF",
  "EXTM3U",
  "PATH",
  "REM",
  "$start",
  "target",
  "m3u_playlist",
  "contents",
  "content" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 6)
  def _reduce_1(val, _values, result)
                          if @current_segment
                        @playlist.segments << @current_segment
                      end
                      result = @playlist
                    
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_3(val, _values, result)
                          @playlist.header = Rm3u::Tag.new(name: val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_4(val, _values, result)
                          @playlist.header = Rm3u::Tag.new(name: val[0])
                    
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_9(val, _values, result)
                          @playlist.tags << Rm3u::Tag.new(name: val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_10(val, _values, result)
                          @playlist.tags << Rm3u::Tag.new(name: val[0], content: val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_11(val, _values, result)
                          if @current_segment
                        @playlist.segments << @current_segment
                      end
                      @current_segment = Rm3u::Segment.new
                      @current_segment.tags << Rm3u::Tag.new(name: val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_12(val, _values, result)
                          if @current_segment
                        @playlist.segments << @current_segment
                      end
                      @current_segment = Rm3u::Segment.new 
                      @current_segment.tags << Rm3u::Tag.new(name: val[0], content: val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_13(val, _values, result)
                          if @current_segment
                        @current_segment.path = val[0]
                        @playlist.segments << @current_segment
                        @current_segment = nil
                      else
                        @playlist.segments << Rm3u::Segment.new(path: val[0])
                      end
                    
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rm3u
